# compile this with
# $ peg jsonpath.peg (creates jsonpath.peg.go)
# using peg from https://github.com/pointlander/peg

package data

import "strings"

type jsonPeg Peg {
    components []extractor
    lastKey    string
}

jsonPath <- jsonPathHead jsonPathNonHead* !.

jsonPathHead <- (jsonMapAccessString / jsonMapAccessBracket) {
        p.addMapAccess(p.lastKey)
    }

jsonPathNonHead <- jsonMapSingleLevel / jsonArraySlice / jsonArrayAccess

jsonMapSingleLevel <- (('.' jsonMapAccessString) / jsonMapAccessBracket) {
        p.addMapAccess(p.lastKey)
    }

jsonMapAccessString <- < [[a-z]] ([[a-z]] / [0-9] / '_')* > {
        substr := string([]rune(buffer)[begin:end])
        p.lastKey = substr
    }

jsonMapAccessBracket <- '[' (singleQuotedString / doubleQuotedString) ']'

# single quotes within a singleQuotedString must be doubled
singleQuotedString <- ['] < ("''" / !"'" .)* > ['] {
        substr := string([]rune(buffer)[begin:end])
        p.lastKey = strings.Replace(substr, "''", "'", -1)
    }

# double quotes within a doubleQuotedString must be doubled
doubleQuotedString <- ["] < ('""' / !'"' .)* > ["] {
        substr := string([]rune(buffer)[begin:end])
        p.lastKey = strings.Replace(substr, "\"\"", "\"", -1)
    }

# TODO add negative indexing
jsonArrayAccess <- '[' < [0-9]+ > ']' {
        substr := string([]rune(buffer)[begin:end])
        p.addArrayAccess(substr)
    }

# TODO add more syntax variations:
#      - [:]
#      - [*]
#      - [start:end:step]
#      - [-3:-1]
jsonArraySlice <- '[' < [0-9]+ ':' [0-9]+ > ']' {
        substr := string([]rune(buffer)[begin:end])
        p.addArraySlice(substr)
    }
