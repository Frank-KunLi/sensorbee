# compile this with
# $ peg bql.peg (creates bql.peg.go)
# using peg from https://github.com/pointlander/peg

package parser

type bqlPegBackend Peg {
    parseStack
}

# Below come the rules, in curly braces the action
# that should be taken after parsing is complete,
# where `p` points to the `Bql` struct above and
# `buffer[begin:end]` holds the string part matching
# this rule.

# Note that where there are multiple "/"-separated alternatives, we
# must take care of the order: Items that match prefixes of other
# items must come later (e.g. the integer parser must come after the
# float parser since "3.14" would first be matched by the integer
# parser and then fail at the "." character).


###########################
##### MAIN STATEMENTS #####
###########################

# Either a statement followed by a semicolon plus maybe some
# other arbitrary stuff (probably other statements), or a
# statement without a semicolon that is not followed by anything.
SingleStatement <- spOpt (StatementWithRest / StatementWithoutRest) !.

StatementWithRest <- < Statement spOpt ';' spOpt > .* {
        p.IncludeTrailingWhitespace(begin, end)
    }

StatementWithoutRest <- < Statement spOpt > {
        p.IncludeTrailingWhitespace(begin, end)
    }

Statement <- (SelectUnionStmt / SelectStmt / SourceStmt / SinkStmt / StateStmt / StreamStmt)

SourceStmt <- CreateSourceStmt / UpdateSourceStmt / DropSourceStmt /
              PauseSourceStmt / ResumeSourceStmt / RewindSourceStmt

SinkStmt <-   CreateSinkStmt / UpdateSinkStmt / DropSinkStmt

StateStmt <-  CreateStateStmt / UpdateStateStmt / DropStateStmt / LoadStateOrCreateStmt /
              LoadStateStmt / SaveStateStmt

StreamStmt <- CreateStreamAsSelectUnionStmt / CreateStreamAsSelectStmt / DropStreamStmt /
              InsertIntoSelectStmt / InsertIntoFromStmt

SelectStmt <- "SELECT"
              Emitter
              Projections
              WindowedFrom
              Filter
              Grouping
              Having
              {
        p.AssembleSelect()
    }

SelectUnionStmt <- < SelectStmt (sp "UNION" sp "ALL" sp SelectStmt)+ > {
        p.AssembleSelectUnion(begin, end)
    }

CreateStreamAsSelectStmt <- "CREATE" sp "STREAM" sp
                    StreamIdentifier sp
                    "AS" sp
                    SelectStmt
                    {
        p.AssembleCreateStreamAsSelect()
    }

CreateStreamAsSelectUnionStmt <- "CREATE" sp "STREAM" sp
                    StreamIdentifier sp
                    "AS" sp
                    SelectUnionStmt
                    {
        p.AssembleCreateStreamAsSelectUnion()
    }

CreateSourceStmt <- "CREATE" PausedOpt sp "SOURCE" sp
                    StreamIdentifier sp
                    "TYPE" sp SourceSinkType
                    SourceSinkSpecs {
        p.AssembleCreateSource()
    }

CreateSinkStmt <- "CREATE" sp "SINK" sp
                    StreamIdentifier sp
                    "TYPE" sp SourceSinkType
                    SourceSinkSpecs {
        p.AssembleCreateSink()
    }

CreateStateStmt <- "CREATE" sp "STATE" sp
                    StreamIdentifier sp
                    "TYPE" sp SourceSinkType
                    SourceSinkSpecs {
        p.AssembleCreateState()
    }

UpdateStateStmt <- "UPDATE" sp "STATE" sp
                    StreamIdentifier
                    UpdateSourceSinkSpecs {
        p.AssembleUpdateState()
    }

UpdateSourceStmt <- "UPDATE" sp "SOURCE" sp
                    StreamIdentifier
                    UpdateSourceSinkSpecs {
        p.AssembleUpdateSource()
    }

UpdateSinkStmt <- "UPDATE" sp "SINK" sp
                    StreamIdentifier
                    UpdateSourceSinkSpecs {
        p.AssembleUpdateSink()
    }

InsertIntoSelectStmt <- "INSERT" sp "INTO" sp
                    StreamIdentifier sp
                    SelectStmt {
        p.AssembleInsertIntoSelect()
    }

InsertIntoFromStmt <- "INSERT" sp "INTO" sp
                    StreamIdentifier sp "FROM" sp
                    StreamIdentifier {
        p.AssembleInsertIntoFrom()
    }

PauseSourceStmt <- "PAUSE" sp "SOURCE" sp StreamIdentifier {
        p.AssemblePauseSource()
    }

ResumeSourceStmt <- "RESUME" sp "SOURCE" sp StreamIdentifier {
        p.AssembleResumeSource()
    }

RewindSourceStmt <- "REWIND" sp "SOURCE" sp StreamIdentifier {
        p.AssembleRewindSource()
    }

DropSourceStmt <- "DROP" sp "SOURCE" sp StreamIdentifier {
        p.AssembleDropSource()
    }

DropStreamStmt <- "DROP" sp "STREAM" sp StreamIdentifier {
        p.AssembleDropStream()
    }

DropSinkStmt <- "DROP" sp "SINK" sp StreamIdentifier {
        p.AssembleDropSink()
    }

DropStateStmt <- "DROP" sp "STATE" sp StreamIdentifier {
        p.AssembleDropState()
    }

LoadStateStmt <- "LOAD" sp "STATE" sp StreamIdentifier sp
                    "TYPE" sp SourceSinkType SetOptSpecs {
        p.AssembleLoadState()
    }

LoadStateOrCreateStmt <- LoadStateStmt sp
                    "OR" sp "CREATE" sp "IF" sp "NOT" sp "EXISTS" SourceSinkSpecs {
        p.AssembleLoadStateOrCreate()
    }

SaveStateStmt <- "SAVE" sp "STATE" sp StreamIdentifier {
        p.AssembleSaveState()
    }

################################
##### STATEMENT COMPONENTS #####
################################

Emitter <- sp (ISTREAM / DSTREAM / RSTREAM) EmitterOptions {
        p.AssembleEmitter()
    }

EmitterOptions <- < (spOpt '[' spOpt EmitterOptionCombinations spOpt ']')? > {
        p.AssembleEmitterOptions(begin, end)
    }

EmitterOptionCombinations <- EmitterLimit / (EmitterSample sp EmitterLimit) / EmitterSample

EmitterLimit <- "LIMIT" sp NumericLiteral {
        p.AssembleEmitterLimit()
    }

EmitterSample <- CountBasedSampling / RandomizedSampling / TimeBasedSampling

CountBasedSampling <- "EVERY" sp NumericLiteral spOpt '-'? spOpt ("ST" / "ND" / "RD" / "TH") sp "TUPLE" {
        p.AssembleEmitterSampling(CountBasedSampling, 1)
    }

RandomizedSampling <- "SAMPLE" sp NumericLiteral spOpt '%' {
        p.AssembleEmitterSampling(RandomizedSampling, 1)
    }

TimeBasedSampling <- TimeBasedSamplingSeconds / TimeBasedSamplingMilliseconds

TimeBasedSamplingSeconds <- "EVERY" sp NumericLiteral sp "SECONDS" {
        p.AssembleEmitterSampling(TimeBasedSampling, 1000)
    }

TimeBasedSamplingMilliseconds <- "EVERY" sp NumericLiteral sp "MILLISECONDS" {
        p.AssembleEmitterSampling(TimeBasedSampling, 1)
    }

Projections <- < sp Projection (spOpt ',' spOpt Projection)* > {
        p.AssembleProjections(begin, end)
    }

Projection <- AliasExpression / ExpressionOrWildcard

AliasExpression <- ExpressionOrWildcard sp "AS" sp TargetIdentifier {
        p.AssembleAlias()
    }

WindowedFrom <- < (sp "FROM" sp Relations)? > {
        // This is *always* executed, even if there is no
        // FROM clause present in the statement.
        p.AssembleWindowedFrom(begin, end)
    }

Interval <- TimeInterval / TuplesInterval

TimeInterval <- NumericLiteral sp (SECONDS / MILLISECONDS) {
        p.AssembleInterval()
    }

TuplesInterval <- NumericLiteral sp TUPLES {
        p.AssembleInterval()
    }

Relations <- RelationLike (spOpt ',' spOpt RelationLike)*

Filter <- < (sp "WHERE" sp Expression)? > {
        // This is *always* executed, even if there is no
        // WHERE clause present in the statement.
        p.AssembleFilter(begin, end)
    }

Grouping <- < (sp "GROUP" sp "BY" sp GroupList)? > {
        // This is *always* executed, even if there is no
        // GROUP BY clause present in the statement.
        p.AssembleGrouping(begin, end)
    }

GroupList <- Expression (spOpt ',' spOpt Expression)*

Having <- < (sp "HAVING" sp Expression)? > {
        // This is *always* executed, even if there is no
        // HAVING clause present in the statement.
        p.AssembleHaving(begin, end)
    }

# NB. Other things that are "relation-like" could be sub-selects
#     or generated tables.
RelationLike <- AliasedStreamWindow / StreamWindow {
        p.EnsureAliasedStreamWindow()
    }

AliasedStreamWindow <- StreamWindow sp "AS" sp Identifier {
        p.AssembleAliasedStreamWindow()
    }

StreamWindow <- StreamLike spOpt '[' spOpt "RANGE" sp Interval spOpt ']' {
        p.AssembleStreamWindow()
    }

StreamLike <- UDSFFuncApp / Stream

UDSFFuncApp <- FuncAppWithoutOrderBy {
        p.AssembleUDSFFuncApp()
    }

SourceSinkSpecs <- < (sp "WITH" sp SourceSinkParam (spOpt ',' spOpt SourceSinkParam)*)? > {
        p.AssembleSourceSinkSpecs(begin, end)
    }

UpdateSourceSinkSpecs <- < sp "SET" sp SourceSinkParam (spOpt ',' spOpt SourceSinkParam)* > {
        p.AssembleSourceSinkSpecs(begin, end)
    }

# If we use UpdateSourceSinkSpecs instead, then AssembleSourceSinkSpecs
# will not be called if the SET clause is not present.
SetOptSpecs <- < (sp "SET" sp SourceSinkParam (spOpt ',' spOpt SourceSinkParam)*)? > {
        p.AssembleSourceSinkSpecs(begin, end)
    }

SourceSinkParam <- SourceSinkParamKey '=' SourceSinkParamVal {
        p.AssembleSourceSinkParam()
    }

SourceSinkParamVal <- ParamLiteral / ParamArrayExpr

ParamLiteral <- BooleanLiteral / Literal

ParamArrayExpr <- < '[' spOpt (ParamLiteral (',' spOpt ParamLiteral)*)? spOpt ','? spOpt ']' > {
        p.AssembleExpressions(begin, end)
        p.AssembleArray()
    }

PausedOpt <- < (sp (Paused / Unpaused))? > {
        p.EnsureKeywordPresent(begin, end)
    }

# The wildcard (`*` or `a:*`) is only valid in a limited number
# of places.
ExpressionOrWildcard <- Wildcard / Expression

##############################
##### NESTED EXPRESSIONS #####
##############################

# The rules below are for implementing nested expressions such
# as `a + 3 = b OR a = b AND b > 0`.
# Note: If we implement this the straightforward
# `Expr <- Expr / (Expr "+" Expr) / ...` way, we will run into
# infinite recursion, so we must at least "eat" one character
# before we arrive back at `Expr`.

Expression <- orExpr

# OR, AND, NOT need a hard space around them
orExpr <- < andExpr (sp Or sp andExpr)* > {
        p.AssembleBinaryOperation(begin, end)
    }

andExpr <- < notExpr (sp And sp notExpr)* > {
        p.AssembleBinaryOperation(begin, end)
    }

notExpr <- < (Not sp)? comparisonExpr > {
        p.AssembleUnaryPrefixOperation(begin, end)
    }

# =, || etc. take an optional space
comparisonExpr <- < otherOpExpr (spOpt ComparisonOp spOpt otherOpExpr)? > {
        p.AssembleBinaryOperation(begin, end)
    }

otherOpExpr <- < isExpr (spOpt OtherOp spOpt isExpr)* > {
        p.AssembleBinaryOperation(begin, end)
    }

# IS needs a hard space
isExpr <- < termExpr (sp IsOp sp NullLiteral)? > {
        p.AssembleBinaryOperation(begin, end)
    }

# +, -, * etc. take an optional space
termExpr <- < productExpr (spOpt PlusMinusOp spOpt productExpr)* > {
        p.AssembleBinaryOperation(begin, end)
    }

productExpr <- < minusExpr (spOpt MultDivOp spOpt minusExpr)* > {
        p.AssembleBinaryOperation(begin, end)
    }

minusExpr <- < (UnaryMinus spOpt)? castExpr > {
        p.AssembleUnaryPrefixOperation(begin, end)
    }

castExpr <- < baseExpr (spOpt '::' spOpt Type)? > {
        p.AssembleTypeCast(begin, end)
    }

baseExpr <-
    ('(' spOpt Expression spOpt ')') /
    MapExpr /
    BooleanLiteral /
    NullLiteral /
    RowMeta /
    FuncTypeCast /
    FuncApp /
    RowValue /
    ArrayExpr /
    Literal

FuncTypeCast <- < "CAST" spOpt '(' spOpt Expression sp "AS" sp Type spOpt ')' > {
        p.AssembleTypeCast(begin, end)
    }

FuncApp <- FuncAppWithOrderBy / FuncAppWithoutOrderBy

FuncAppWithOrderBy <- Function spOpt '(' spOpt FuncParams sp ParamsOrder spOpt ')' {
        p.AssembleFuncApp()
    }

FuncAppWithoutOrderBy <- Function spOpt '(' spOpt FuncParams < spOpt > ')' {
        p.AssembleExpressions(begin, end)
        p.AssembleFuncApp()
    }

FuncParams <- < (ExpressionOrWildcard (spOpt ',' spOpt ExpressionOrWildcard)*)? > {
        p.AssembleExpressions(begin, end)
    }

ParamsOrder <- < "ORDER" sp "BY" sp SortedExpression (spOpt ',' spOpt SortedExpression)* > {
        p.AssembleExpressions(begin, end)
    }

SortedExpression <- Expression OrderDirectionOpt {
        p.AssembleSortedExpression()
    }

OrderDirectionOpt <- < (sp (Ascending / Descending))? > {
        p.EnsureKeywordPresent(begin, end)
    }

ArrayExpr <- < '[' spOpt (ExpressionOrWildcard (spOpt ',' spOpt ExpressionOrWildcard)*)? spOpt ','? spOpt ']' > {
        p.AssembleExpressions(begin, end)
        p.AssembleArray()
    }

MapExpr <- < '{' spOpt (KeyValuePair (spOpt ',' spOpt KeyValuePair)*)? spOpt '}' > {
        p.AssembleMap(begin, end)
    }

KeyValuePair <- < StringLiteral spOpt ':' spOpt ExpressionOrWildcard > {
        p.AssembleKeyValuePair()
    }

Literal <-
    FloatLiteral / NumericLiteral / StringLiteral

ComparisonOp <- Equal / NotEqual / LessOrEqual / Less /
        GreaterOrEqual / Greater / NotEqual

OtherOp <- Concat

IsOp <- IsNot / Is

PlusMinusOp <- Plus / Minus

MultDivOp <- Multiply / Divide / Modulo


#################################
##### BASIC BUILDING BLOCKS #####
#################################

# NB. The `begin` and `end` indexes that we get from the peg
# library are indexes of the `rune array` corresponding to
# the input, but the `buffer` is a string! Therefore
# `buffer[begin:end]` does only match the actual match for
# ASCII strings and in general we have to use `string([]rune[begin:end])`.

Stream <- < ident > {
        substr := string([]rune(buffer)[begin:end])
        p.PushComponent(begin, end, NewStream(substr))
    }

RowMeta <- RowTimestamp

RowTimestamp <- < (ident ':')? 'ts()' > {
        substr := string([]rune(buffer)[begin:end])
        p.PushComponent(begin, end, NewRowMeta(substr, TimestampMeta))
    }

# NB. We need the negative lookahead (!':') to avoid problems
# with a::int, which would otherwise lead to a parse error because
# `a` would be read as the stream identifier, and `:int` is not a
# valid JSON path.
RowValue <- < (ident ':' !':')? jsonGetPath > {
        substr := string([]rune(buffer)[begin:end])
        p.PushComponent(begin, end, NewRowValue(substr))
    }

NumericLiteral <- < '-'? [0-9]+ > {
        substr := string([]rune(buffer)[begin:end])
        p.PushComponent(begin, end, NewNumericLiteral(substr))
    }

FloatLiteral <- < '-'? [0-9]+ '.' [0-9]+ > {
        substr := string([]rune(buffer)[begin:end])
        p.PushComponent(begin, end, NewFloatLiteral(substr))
    }

Function <- < ident > {
        substr := string([]rune(buffer)[begin:end])
        p.PushComponent(begin, end, FuncName(substr))
    }

NullLiteral <- < "NULL" > {
        p.PushComponent(begin, end, NewNullLiteral())
    }

BooleanLiteral <- TRUE / FALSE

TRUE <- < "true" > {
        p.PushComponent(begin, end, NewBoolLiteral(true))
    }

FALSE <- < "false" > {
        p.PushComponent(begin, end, NewBoolLiteral(false))
    }

Wildcard <- < (ident ':' !':')? '*' > {
        substr := string([]rune(buffer)[begin:end])
        p.PushComponent(begin, end, NewWildcard(substr))
    }

StringLiteral <- < ['] ("''" / !"'" .)* ['] > {
        substr := string([]rune(buffer)[begin:end])
        p.PushComponent(begin, end, NewStringLiteral(substr))
    }

ISTREAM <- < "ISTREAM" > {
        p.PushComponent(begin, end, Istream)
    }

DSTREAM <- < "DSTREAM" > {
        p.PushComponent(begin, end, Dstream)
    }

RSTREAM <- < "RSTREAM" > {
        p.PushComponent(begin, end, Rstream)
    }

TUPLES <- < "TUPLES" > {
        p.PushComponent(begin, end, Tuples)
    }

SECONDS <- < "SECONDS" > {
        p.PushComponent(begin, end, Seconds)
    }

MILLISECONDS <- < "MILLISECONDS" > {
        p.PushComponent(begin, end, Milliseconds)
    }

StreamIdentifier <- < ident > {
        substr := string([]rune(buffer)[begin:end])
        p.PushComponent(begin, end, StreamIdentifier(substr))
    }

SourceSinkType <- < ident > {
        substr := string([]rune(buffer)[begin:end])
        p.PushComponent(begin, end, SourceSinkType(substr))
    }

SourceSinkParamKey <- < ident > {
        substr := string([]rune(buffer)[begin:end])
        p.PushComponent(begin, end, SourceSinkParamKey(substr))
    }

Paused <- < "PAUSED" > {
        p.PushComponent(begin, end, Yes)
    }

Unpaused <- < "UNPAUSED" > {
        p.PushComponent(begin, end, No)
    }

Ascending <- < "ASC" > {
        p.PushComponent(begin, end, Yes)
    }

Descending <- < "DESC" > {
        p.PushComponent(begin, end, No)
    }

Type <- Bool / Int / Float / String / Blob / Timestamp / Array / Map

Bool <- < "bool" > {
        p.PushComponent(begin, end, Bool)
    }

Int <- < "int" > {
        p.PushComponent(begin, end, Int)
    }

Float <- < "float" > {
        p.PushComponent(begin, end, Float)
    }

String <- < "string" > {
        p.PushComponent(begin, end, String)
    }

Blob <- < "blob" > {
        p.PushComponent(begin, end, Blob)
    }

Timestamp <- < "timestamp" > {
        p.PushComponent(begin, end, Timestamp)
    }

Array <- < "array" > {
        p.PushComponent(begin, end, Array)
    }

Map <- < "map" > {
        p.PushComponent(begin, end, Map)
    }

Or <- < "OR" > {
        p.PushComponent(begin, end, Or)
    }

And <- < "AND" > {
        p.PushComponent(begin, end, And)
    }

Not <- < "NOT" > {
        p.PushComponent(begin, end, Not)
    }

Equal <- < "=" > {
        p.PushComponent(begin, end, Equal)
    }

Less <- < "<" > {
        p.PushComponent(begin, end, Less)
    }

LessOrEqual <- < "<=" > {
        p.PushComponent(begin, end, LessOrEqual)
    }

Greater <- < ">" > {
        p.PushComponent(begin, end, Greater)
    }

GreaterOrEqual <- < ">=" > {
        p.PushComponent(begin, end, GreaterOrEqual)
    }

NotEqual <- < "!=" / "<>" > {
        p.PushComponent(begin, end, NotEqual)
    }

Concat <- < "||" > {
        p.PushComponent(begin, end, Concat)
    }

Is <- < "IS" > {
        p.PushComponent(begin, end, Is)
    }

IsNot <- < "IS" sp "NOT" > {
        p.PushComponent(begin, end, IsNot)
    }

Plus <- < "+" > {
        p.PushComponent(begin, end, Plus)
    }

Minus <- < "-" > {
        p.PushComponent(begin, end, Minus)
    }

Multiply <- < "*" > {
        p.PushComponent(begin, end, Multiply)
    }

Divide <- < "/" > {
        p.PushComponent(begin, end, Divide)
    }

Modulo <- < "%" > {
        p.PushComponent(begin, end, Modulo)
    }

UnaryMinus <- < "-" > {
        p.PushComponent(begin, end, UnaryMinus)
    }

Identifier <- < ident > {
        substr := string([]rune(buffer)[begin:end])
        p.PushComponent(begin, end, Identifier(substr))
    }

TargetIdentifier <- < jsonSetPath > {
        substr := string([]rune(buffer)[begin:end])
        p.PushComponent(begin, end, Identifier(substr))
    }

ident <- [[a-z]] ([[a-z]] / [0-9] / '_')*

# We distinguish between get and set JSON paths because we don't want
# `SELECT x AS y[2:3].hoge` to be a valid statement.

jsonGetPath <- jsonPathHead jsonGetPathNonHead*

jsonSetPath <- jsonPathHead jsonSetPathNonHead*

jsonPathHead <- (jsonMapAccessString / jsonMapAccessBracket)

jsonGetPathNonHead <- jsonMapMultipleLevel / jsonMapSingleLevel /
    jsonArrayFullSlice / jsonArrayPartialSlice / jsonArraySlice / jsonArrayAccess

jsonSetPathNonHead <- jsonMapSingleLevel / jsonNonNegativeArrayAccess

jsonMapSingleLevel <- (('.' jsonMapAccessString) / jsonMapAccessBracket)

jsonMapMultipleLevel <- '..' (jsonMapAccessString / jsonMapAccessBracket)

jsonMapAccessString <- < [[a-z]] ([[a-z]] / [0-9] / '_')* >

jsonMapAccessBracket <- '[' (singleQuotedString) ']'

singleQuotedString <- ['] < ("''" / !"'" .)* > [']

jsonArrayAccess <- '[' < '-'? [0-9]+ > ']'

jsonNonNegativeArrayAccess <- '[' < [0-9]+ > ']'

jsonArraySlice <- '[' < '-'? [0-9]+ ':' '-'? [0-9]+ (':' '-'? [0-9]+)? > ']'

jsonArrayPartialSlice <- '[' < (':' '-'? [0-9]+) / ('-'? [0-9]+ ':') > ']'

jsonArrayFullSlice <- '[:]'

spElem <- ( ' ' / '\t' / '\n' / '\r' / comment / finalComment )

sp <- spElem+

spOpt <- spElem*

# Note: we need a negative-lookahead *and then* need to eat
# one character, or we will have infinite recursion.
comment <- '--' (![\r\n] .)* [\r\n]

finalComment <- '--' (![\r\n] .)* !.
