# compile this with
# $ peg bql.peg (creates bql.peg.go)
# using peg from https://github.com/pointlander/peg

package parser

type bqlPeg Peg {
    parseStack
}

# Below come the rules, in curly braces the action
# that should be taken after parsing is complete,
# where `p` points to the `Bql` struct above and
# `buffer[begin:end]` holds the string part matching
# this rule.

# Note that where there are multiple "/"-separated alternatives, we
# must take care of the order: Items that match prefixes of other
# items must come later (e.g. the integer parser must come after the
# float parser since "3.14" would first be matched by the integer
# parser and then fail at the "." character).


###########################
##### MAIN STATEMENTS #####
###########################

Statements <- sp ((Statement sp ';' .*) / Statement) !.

Statement <- (SelectUnionStmt / SelectStmt / SourceStmt / SinkStmt / StateStmt / StreamStmt)

SourceStmt <- CreateSourceStmt / UpdateSourceStmt / DropSourceStmt /
              PauseSourceStmt / ResumeSourceStmt / RewindSourceStmt

SinkStmt <-   CreateSinkStmt / UpdateSinkStmt / DropSinkStmt

StateStmt <-  CreateStateStmt / UpdateStateStmt / DropStateStmt

StreamStmt <- CreateStreamAsSelectUnionStmt / CreateStreamAsSelectStmt / DropStreamStmt /
              InsertIntoSelectStmt / InsertIntoFromStmt

SelectStmt <- "SELECT" sp
              Emitter sp
              Projections sp
              WindowedFrom sp
              Filter sp
              Grouping sp
              Having sp
              {
        p.AssembleSelect()
    }

SelectUnionStmt <- < SelectStmt ("UNION" sp "ALL" sp SelectStmt)+ > {
        p.AssembleSelectUnion(begin, end)
    }

CreateStreamAsSelectStmt <- "CREATE" sp "STREAM" sp
                    StreamIdentifier sp
                    "AS" sp
                    SelectStmt
                    {
        p.AssembleCreateStreamAsSelect()
    }

CreateStreamAsSelectUnionStmt <- "CREATE" sp "STREAM" sp
                    StreamIdentifier sp
                    "AS" sp
                    SelectUnionStmt
                    {
        p.AssembleCreateStreamAsSelectUnion()
    }

CreateSourceStmt <- "CREATE" sp PausedOpt sp "SOURCE" sp
                    StreamIdentifier sp
                    "TYPE" sp SourceSinkType sp
                    SourceSinkSpecs {
        p.AssembleCreateSource()
    }

CreateSinkStmt <- "CREATE" sp "SINK" sp
                    StreamIdentifier sp
                    "TYPE" sp SourceSinkType sp
                    SourceSinkSpecs {
        p.AssembleCreateSink()
    }

CreateStateStmt <- "CREATE" sp "STATE" sp
                    StreamIdentifier sp
                    "TYPE" sp SourceSinkType sp
                    SourceSinkSpecs {
        p.AssembleCreateState()
    }

UpdateStateStmt <- "UPDATE" sp "STATE" sp
                    StreamIdentifier sp
                    UpdateSourceSinkSpecs {
        p.AssembleUpdateState()
    }

UpdateSourceStmt <- "UPDATE" sp "SOURCE" sp
                    StreamIdentifier sp
                    UpdateSourceSinkSpecs {
        p.AssembleUpdateSource()
    }

UpdateSinkStmt <- "UPDATE" sp "SINK" sp
                    StreamIdentifier sp
                    UpdateSourceSinkSpecs {
        p.AssembleUpdateSink()
    }

InsertIntoSelectStmt <- "INSERT" sp "INTO" sp
                    StreamIdentifier sp
                    SelectStmt {
        p.AssembleInsertIntoSelect()
    }

InsertIntoFromStmt <- "INSERT" sp "INTO" sp
                    StreamIdentifier sp "FROM" sp
                    StreamIdentifier {
        p.AssembleInsertIntoFrom()
    }

PauseSourceStmt <- "PAUSE" sp "SOURCE" sp StreamIdentifier {
        p.AssemblePauseSource()
    }

ResumeSourceStmt <- "RESUME" sp "SOURCE" sp StreamIdentifier {
        p.AssembleResumeSource()
    }

RewindSourceStmt <- "REWIND" sp "SOURCE" sp StreamIdentifier {
        p.AssembleRewindSource()
    }

DropSourceStmt <- "DROP" sp "SOURCE" sp StreamIdentifier {
        p.AssembleDropSource()
    }

DropStreamStmt <- "DROP" sp "STREAM" sp StreamIdentifier {
        p.AssembleDropStream()
    }

DropSinkStmt <- "DROP" sp "SINK" sp StreamIdentifier {
        p.AssembleDropSink()
    }

DropStateStmt <- "DROP" sp "STATE" sp StreamIdentifier {
        p.AssembleDropState()
    }

################################
##### STATEMENT COMPONENTS #####
################################

Emitter <- (ISTREAM / DSTREAM / RSTREAM) {
        p.AssembleEmitter()
    }

Projections <- < Projection sp (',' sp Projection)* > {
        p.AssembleProjections(begin, end)
    }

# Note: We only allow the Wildcard expression in the Projections,
# not as part of an Expression. Without a schema, it is very hard
# to reason about the applicability of * as part of an expression.
Projection <- AliasExpression / Expression / Wildcard

AliasExpression <- (Expression / Wildcard) sp "AS" sp TargetIdentifier {
        p.AssembleAlias()
    }

WindowedFrom <- < ("FROM" sp Relations sp)? > {
        // This is *always* executed, even if there is no
        // FROM clause present in the statement.
        p.AssembleWindowedFrom(begin, end)
    }

Interval <- TimeInterval / TuplesInterval

TimeInterval <- NumericLiteral sp (SECONDS / MILLISECONDS) {
        p.AssembleInterval()
    }

TuplesInterval <- NumericLiteral sp TUPLES {
        p.AssembleInterval()
    }

Relations <- RelationLike sp (',' sp RelationLike)*

Filter <- < ("WHERE" sp Expression)? > {
        // This is *always* executed, even if there is no
        // WHERE clause present in the statement.
        p.AssembleFilter(begin, end)
    }

Grouping <- < ("GROUP" sp "BY" sp GroupList)? > {
        // This is *always* executed, even if there is no
        // GROUP BY clause present in the statement.
        p.AssembleGrouping(begin, end)
    }

GroupList <- Expression sp (',' sp Expression)*

Having <- < ("HAVING" sp Expression)? > {
        // This is *always* executed, even if there is no
        // HAVING clause present in the statement.
        p.AssembleHaving(begin, end)
    }

# NB. Other things that are "relation-like" could be sub-selects
#     or generated tables.
RelationLike <- AliasedStreamWindow / StreamWindow {
        p.EnsureAliasedStreamWindow()
    }

AliasedStreamWindow <- StreamWindow sp "AS" sp Identifier {
        p.AssembleAliasedStreamWindow()
    }

StreamWindow <- StreamLike sp '[' sp "RANGE" sp Interval sp ']' {
        p.AssembleStreamWindow()
    }

StreamLike <- UDSFFuncApp / Stream

UDSFFuncApp <- FuncApp {
        p.AssembleUDSFFuncApp()
    }

SourceSinkSpecs <- < ("WITH" sp SourceSinkParam sp (',' sp SourceSinkParam)*)? > {
        p.AssembleSourceSinkSpecs(begin, end)
    }

UpdateSourceSinkSpecs <- < "SET" sp SourceSinkParam sp (',' sp SourceSinkParam)* > {
        p.AssembleSourceSinkSpecs(begin, end)
    }

SourceSinkParam <- SourceSinkParamKey '=' SourceSinkParamVal {
        p.AssembleSourceSinkParam()
    }

SourceSinkParamVal <- BooleanLiteral / Literal

PausedOpt <- < (Paused / Unpaused)? > {
        p.EnsureKeywordPresent(begin, end)
    }


##############################
##### NESTED EXPRESSIONS #####
##############################

# The rules below are for implementing nested expressions such
# as `a + 3 = b OR a = b AND b > 0`.
# Note: If we implement this the straightforward
# `Expr <- Expr / (Expr "+" Expr) / ...` way, we will run into
# infinite recursion, so we must at least "eat" one character
# before we arrive back at `Expr`.

Expression <- orExpr

orExpr <- < andExpr sp (Or sp andExpr)? > {
        p.AssembleBinaryOperation(begin, end)
    }

andExpr <- < notExpr sp (And sp notExpr)? > {
        p.AssembleBinaryOperation(begin, end)
    }

notExpr <- < (Not sp)? comparisonExpr > {
        p.AssembleUnaryPrefixOperation(begin, end)
    }

comparisonExpr <- < otherOpExpr sp (ComparisonOp sp otherOpExpr)? > {
        p.AssembleBinaryOperation(begin, end)
    }

otherOpExpr <- < isExpr sp (OtherOp sp isExpr sp)* > {
        p.AssembleBinaryOperation(begin, end)
    }

isExpr <- < termExpr sp (IsOp sp NullLiteral)? > {
        p.AssembleBinaryOperation(begin, end)
    }

termExpr <- < productExpr sp (PlusMinusOp sp productExpr sp)* > {
        p.AssembleBinaryOperation(begin, end)
    }

productExpr <- < minusExpr sp (MultDivOp sp minusExpr sp)* > {
        p.AssembleBinaryOperation(begin, end)
    }

minusExpr <- < (UnaryMinus sp)? castExpr > {
        p.AssembleUnaryPrefixOperation(begin, end)
    }

castExpr <- < baseExpr (sp '::' sp Type)? > {
        p.AssembleTypeCast(begin, end)
    }

baseExpr <-
    ('(' sp Expression sp ')') /
    ArrayExpr /
    BooleanLiteral /
    NullLiteral /
    RowMeta /
    FuncTypeCast /
    FuncApp /
    RowValue /
    Literal

FuncTypeCast <- < "CAST" sp '(' sp Expression sp "AS" sp Type sp ')' > {
        p.AssembleTypeCast(begin, end)
    }

FuncApp <- Function sp '(' sp FuncParams sp ')' {
        p.AssembleFuncApp()
    }

FuncParams <- < Star / (Expression sp (',' sp Expression)*)? > {
        p.AssembleExpressions(begin, end)
    }

ArrayExpr <- < '[' sp (Expression (',' sp Expression)*)? sp ']' > {
        p.AssembleExpressions(begin, end)
        p.AssembleArray()
    }

Literal <-
    FloatLiteral / NumericLiteral / StringLiteral

ComparisonOp <- Equal / NotEqual / LessOrEqual / Less /
        GreaterOrEqual / Greater / NotEqual

OtherOp <- Concat

IsOp <- IsNot / Is

PlusMinusOp <- Plus / Minus

MultDivOp <- Multiply / Divide / Modulo


#################################
##### BASIC BUILDING BLOCKS #####
#################################

# NB. The `begin` and `end` indexes that we get from the peg
# library are indexes of the `rune array` corresponding to
# the input, but the `buffer` is a string! Therefore
# `buffer[begin:end]` does only match the actual match for
# ASCII strings and in general we have to use `string([]rune[begin:end])`.

Stream <- < ident > {
        substr := string([]rune(buffer)[begin:end])
        p.PushComponent(begin, end, NewStream(substr))
    }

RowMeta <- RowTimestamp

RowTimestamp <- < (ident ':')? 'ts()' > {
        substr := string([]rune(buffer)[begin:end])
        p.PushComponent(begin, end, NewRowMeta(substr, TimestampMeta))
    }

# NB. We need the negative lookahead (!':') to avoid problems
# with a::int, which would otherwise lead to a parse error because
# `a` would be read as the stream identifier, and `:int` is not a
# valid JSON path.
RowValue <- < (ident ':' !':')? jsonPath > {
        substr := string([]rune(buffer)[begin:end])
        p.PushComponent(begin, end, NewRowValue(substr))
    }

NumericLiteral <- < '-'? [0-9]+ > {
        substr := string([]rune(buffer)[begin:end])
        p.PushComponent(begin, end, NewNumericLiteral(substr))
    }

FloatLiteral <- < '-'? [0-9]+ '.' [0-9]+ > {
        substr := string([]rune(buffer)[begin:end])
        p.PushComponent(begin, end, NewFloatLiteral(substr))
    }

Function <- < ident > {
        substr := string([]rune(buffer)[begin:end])
        p.PushComponent(begin, end, FuncName(substr))
    }

NullLiteral <- < "NULL" > {
        p.PushComponent(begin, end, NewNullLiteral())
    }

BooleanLiteral <- TRUE / FALSE

TRUE <- < "true" > {
        p.PushComponent(begin, end, NewBoolLiteral(true))
    }

FALSE <- < "false" > {
        p.PushComponent(begin, end, NewBoolLiteral(false))
    }

Star <- < '*' > {
        p.PushComponent(begin, end, NewWildcard(""))
    }

Wildcard <- < (ident ':' !':')? '*' > {
        substr := string([]rune(buffer)[begin:end])
        p.PushComponent(begin, end, NewWildcard(substr))
    }

StringLiteral <- < ['] ("''" / !"'" .)* ['] > {
        substr := string([]rune(buffer)[begin:end])
        p.PushComponent(begin, end, NewStringLiteral(substr))
    }

ISTREAM <- < "ISTREAM" > {
        p.PushComponent(begin, end, Istream)
    }

DSTREAM <- < "DSTREAM" > {
        p.PushComponent(begin, end, Dstream)
    }

RSTREAM <- < "RSTREAM" > {
        p.PushComponent(begin, end, Rstream)
    }

TUPLES <- < "TUPLES" > {
        p.PushComponent(begin, end, Tuples)
    }

SECONDS <- < "SECONDS" > {
        p.PushComponent(begin, end, Seconds)
    }

MILLISECONDS <- < "MILLISECONDS" > {
        p.PushComponent(begin, end, Milliseconds)
    }

StreamIdentifier <- < ident > {
        substr := string([]rune(buffer)[begin:end])
        p.PushComponent(begin, end, StreamIdentifier(substr))
    }

SourceSinkType <- < ident > {
        substr := string([]rune(buffer)[begin:end])
        p.PushComponent(begin, end, SourceSinkType(substr))
    }

SourceSinkParamKey <- < ident > {
        substr := string([]rune(buffer)[begin:end])
        p.PushComponent(begin, end, SourceSinkParamKey(substr))
    }

Paused <- < "PAUSED" > {
        p.PushComponent(begin, end, Yes)
    }

Unpaused <- < "UNPAUSED" > {
        p.PushComponent(begin, end, No)
    }

Type <- Bool / Int / Float / String / Blob / Timestamp / Array / Map

Bool <- < "bool" > {
        p.PushComponent(begin, end, Bool)
    }

Int <- < "int" > {
        p.PushComponent(begin, end, Int)
    }

Float <- < "float" > {
        p.PushComponent(begin, end, Float)
    }

String <- < "string" > {
        p.PushComponent(begin, end, String)
    }

Blob <- < "blob" > {
        p.PushComponent(begin, end, Blob)
    }

Timestamp <- < "timestamp" > {
        p.PushComponent(begin, end, Timestamp)
    }

Array <- < "array" > {
        p.PushComponent(begin, end, Array)
    }

Map <- < "map" > {
        p.PushComponent(begin, end, Map)
    }

Or <- < "OR" > {
        p.PushComponent(begin, end, Or)
    }

And <- < "AND" > {
        p.PushComponent(begin, end, And)
    }

Not <- < "NOT" > {
        p.PushComponent(begin, end, Not)
    }

Equal <- < "=" > {
        p.PushComponent(begin, end, Equal)
    }

Less <- < "<" > {
        p.PushComponent(begin, end, Less)
    }

LessOrEqual <- < "<=" > {
        p.PushComponent(begin, end, LessOrEqual)
    }

Greater <- < ">" > {
        p.PushComponent(begin, end, Greater)
    }

GreaterOrEqual <- < ">=" > {
        p.PushComponent(begin, end, GreaterOrEqual)
    }

NotEqual <- < "!=" / "<>" > {
        p.PushComponent(begin, end, NotEqual)
    }

Concat <- < "||" > {
        p.PushComponent(begin, end, Concat)
    }

Is <- < "IS" > {
        p.PushComponent(begin, end, Is)
    }

IsNot <- < "IS" sp "NOT" > {
        p.PushComponent(begin, end, IsNot)
    }

Plus <- < "+" > {
        p.PushComponent(begin, end, Plus)
    }

Minus <- < "-" > {
        p.PushComponent(begin, end, Minus)
    }

Multiply <- < "*" > {
        p.PushComponent(begin, end, Multiply)
    }

Divide <- < "/" > {
        p.PushComponent(begin, end, Divide)
    }

Modulo <- < "%" > {
        p.PushComponent(begin, end, Modulo)
    }

UnaryMinus <- < "-" > {
        p.PushComponent(begin, end, UnaryMinus)
    }

Identifier <- < ident > {
        substr := string([]rune(buffer)[begin:end])
        p.PushComponent(begin, end, Identifier(substr))
    }

TargetIdentifier <- < jsonPath > {
        substr := string([]rune(buffer)[begin:end])
        p.PushComponent(begin, end, Identifier(substr))
    }

ident <- [[a-z]] ([[a-z]] / [0-9] / '_')*

# TODO actual JSON Path must allow a larger range of characters
jsonPath <- [[a-z]] ([[a-z]] / [0-9] / '_' / '.' / '[' / ']' / '"')*

sp <- ( ' ' / '\t' / '\n' / '\r' / comment )*

# Note: we need a negative-lookahead *and then* need to eat
# one character, or we will have infinite recursion.
comment <- '--' (![\r\n] .)* [\r\n]
