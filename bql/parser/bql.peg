# compile this with
# $ peg bql.peg (creates bql.peg.go)
# using peg from https://github.com/pointlander/peg

package parser

type bqlPeg Peg {
    parseStack
}

# below come the rules, in curly braces the action
# that should be taken after parsing is complete,
# where `p` points to the `Bql` struct above and
# `buffer[begin:end]` holds the string part matching
# this rule.

Statement <- (SelectStmt / CreateStreamAsSelectStmt / CreateSourceStmt /
             CreateStreamFromSourceStmt / CreateStreamFromSourceExtStmt /
             CreateSinkStmt / InsertIntoSelectStmt) !.

SelectStmt <- "SELECT" sp
              Projections sp
              From sp
              Filter sp
              Grouping sp
              Having sp
              {
        p.AssembleSelect()
    }

CreateStreamAsSelectStmt <- "CREATE" sp "STREAM" sp
                    Relation sp
                    "AS" sp "SELECT" sp
                    EmitProjections sp
                    WindowedFrom sp
                    Filter sp
                    Grouping sp
                    Having sp
                    {
        p.AssembleCreateStreamAsSelect()
    }

CreateSourceStmt <- "CREATE" sp "SOURCE" sp
                    SourceSinkName sp
                    "TYPE" sp SourceSinkType sp
                    SourceSinkSpecs {
        p.AssembleCreateSource()
    }

CreateSinkStmt <- "CREATE" sp "SINK" sp
                    SourceSinkName sp
                    "TYPE" sp SourceSinkType sp
                    SourceSinkSpecs {
        p.AssembleCreateSink()
    }

CreateStreamFromSourceStmt <- "CREATE" sp "STREAM" sp
                    Relation sp
                    "FROM" sp "SOURCE" sp
                    SourceSinkName {
        p.AssembleCreateStreamFromSource()
    }

CreateStreamFromSourceExtStmt <- "CREATE" sp "STREAM" sp
                    Relation sp
                    "FROM" sp SourceSinkType sp "SOURCE" sp
                    SourceSinkSpecs {
        p.AssembleCreateStreamFromSourceExt()
    }

InsertIntoSelectStmt <- "INSERT" sp "INTO" sp
                    SourceSinkName sp
                    SelectStmt {
        p.AssembleInsertIntoSelect()
    }

# Projections/Columns (mandatory)

EmitProjections <- Emitter sp '(' Projections ')' {
        p.AssembleEmitProjections()
    }

Projections <- < Projection sp (',' sp Projection)* > {
        p.AssembleProjections(begin, end)
    }

Projection <- Expression

# FROM clause (optional)

WindowedFrom <- < ("FROM" sp Relations sp
                   '[' sp "RANGE" sp Range sp ']')? > {
        // This is *always* executed, even if there is no
        // FROM clause present in the statement.
        p.AssembleWindowedFrom(begin, end)
    }

Range <- NumericLiteral sp RangeUnit {
        p.AssembleRange()
    }

From <- < ("FROM" sp Relations)? > {
        // This is *always* executed, even if there is no
        // FROM clause present in the statement.
        p.AssembleFrom(begin, end)
    }

Relations <- Relation sp (',' sp Relation)*

Relation <- < [a-z]+ > {
        p.PushComponent(begin, end, NewRelation(buffer[begin:end]))
    }

# WHERE clause (optional)

Filter <- < ("WHERE" sp Expression)? > {
        // This is *always* executed, even if there is no
        // WHERE clause present in the statement.
        p.AssembleFilter(begin, end)
    }

# GROUP BY clause (optional)

Grouping <- < ("GROUP" sp "BY" sp GroupList)? > {
        // This is *always* executed, even if there is no
        // GROUP BY clause present in the statement.
        p.AssembleGrouping(begin, end)
    }

GroupList <- Expression sp (',' sp Expression)*

# HAVING clause

Having <- < ("HAVING" sp Expression)? > {
        // This is *always* executed, even if there is no
        // HAVING clause present in the statement.
        p.AssembleHaving(begin, end)
    }

# CREATE SOURCE parameters

SourceSinkName <- < [a-z]+ > {
        p.PushComponent(begin, end, SourceSinkName(buffer[begin:end]))
    }

SourceSinkType <- < [a-z]+ > {
        p.PushComponent(begin, end, SourceSinkType(buffer[begin:end]))
    }

SourceSinkSpecs <- < ("WITH" sp SourceSinkParam sp (',' sp SourceSinkParam)*)? > {
        p.AssembleSourceSinkSpecs(begin, end)
    }

SourceSinkParam <- SourceSinkParamKey '=' SourceSinkParamVal {
        p.AssembleSourceSinkParam()
    }

SourceSinkParamKey <- < [a-z0-9]+ > {
        p.PushComponent(begin, end, SourceSinkParamKey(buffer[begin:end]))
    }

SourceSinkParamVal <- < [a-z0-9]+ > {
        p.PushComponent(begin, end, SourceSinkParamVal(buffer[begin:end]))
    }

# The rules below are for implementing nested expressions such
# as `a + 3 = b OR a = b AND b > 0`.
# Note: If we implement this the straightforward
# `Expr <- Expr / (Expr "+" Expr) / ...` way, we will run into
# infinite recursion.
# Also note: If we use
# `plusMinusExp <- (multExp "+" multExp) / (multExp "-" multExp)`
# instead of
# `plusExp <- (minusExp "+" minusExp)
# `minusExp <- (multExp "-" multExp)
# (in spirit) then for some reason this will not catch the "-"
# operations properly.

Expression <- orExpr

orExpr <- < andExpr sp (Or sp andExpr)? > {
        p.AssembleBinaryOperation(begin, end)
    }

andExpr <- < comparisonExpr sp (And sp comparisonExpr)? > {
        p.AssembleBinaryOperation(begin, end)
    }

comparisonExpr <- < termExpr sp (ComparisonOp sp termExpr)? > {
        p.AssembleBinaryOperation(begin, end)
    }

termExpr <- < productExpr sp (PlusMinusOp sp productExpr)? > {
        p.AssembleBinaryOperation(begin, end)
    }

productExpr <- < baseExpr sp (MultDivOp sp baseExpr)? > {
        p.AssembleBinaryOperation(begin, end)
    }

baseExpr <-
    BooleanLiteral /
    ('(' sp Expression sp ')') /
    FuncApp /
    ColumnName /
    Wildcard /
    Literal

FuncApp <- Function sp '(' sp FuncParams sp ')' {
        p.AssembleFuncApp()
    }

FuncParams <- < Expression sp (',' sp Expression)* > {
        p.AssembleExpressions(begin, end)
    }

Literal <-
    FloatLiteral / NumericLiteral / StringLiteral

ComparisonOp <- Equal / NotEqual / LessOrEqual / Less /
        GreaterOrEqual / Greater / NotEqual

PlusMinusOp <- Plus / Minus

MultDivOp <- Multiply / Divide / Modulo
# NB. The `begin` and `end` indexes that we get from the peg
# library are indexes of the `rune array` corresponding to
# the input, but the `buffer` is a string! Therefore
# `buffer[begin:end]` does only match the actual match for
# ASCII strings and in general we have to use `string([]rune[begin:end])`.

ColumnName <- < ident > {
        substr := string([]rune(buffer)[begin:end])
        p.PushComponent(begin, end, NewColumnName(substr))
    }

NumericLiteral <- < '-'? [0-9]+ > {
        substr := string([]rune(buffer)[begin:end])
        p.PushComponent(begin, end, NewNumericLiteral(substr))
    }

FloatLiteral <- < '-'? [0-9]+ '.' [0-9]+ > {
        substr := string([]rune(buffer)[begin:end])
        p.PushComponent(begin, end, NewFloatLiteral(substr))
    }

Function <- < ident > {
        substr := string([]rune(buffer)[begin:end])
        p.PushComponent(begin, end, FuncName(substr))
    }

BooleanLiteral <- TRUE / FALSE

TRUE <- < "true" > {
        p.PushComponent(begin, end, NewBoolLiteral(true))
    }

FALSE <- < "false" > {
        p.PushComponent(begin, end, NewBoolLiteral(false))
    }

Wildcard <- < '*' > {
        p.PushComponent(begin, end, NewWildcard())
    }

StringLiteral <- < ['] ("''" / !"'" .)* ['] > {
        substr := string([]rune(buffer)[begin:end])
        p.PushComponent(begin, end, NewStringLiteral(substr))
    }

Emitter <- ISTREAM / DSTREAM / RSTREAM

ISTREAM <- < "ISTREAM" > {
        p.PushComponent(begin, end, Istream)
    }

DSTREAM <- < "DSTREAM" > {
        p.PushComponent(begin, end, Dstream)
    }

RSTREAM <- < "RSTREAM" > {
        p.PushComponent(begin, end, Rstream)
    }

RangeUnit <- TUPLES / SECONDS

TUPLES <- < "TUPLES" > {
        p.PushComponent(begin, end, Tuples)
    }

SECONDS <- < "SECONDS" > {
        p.PushComponent(begin, end, Seconds)
    }

Or <- < "OR" > {
        p.PushComponent(begin, end, Or)
    }

And <- < "AND" > {
        p.PushComponent(begin, end, And)
    }

Equal <- < "=" > {
        p.PushComponent(begin, end, Equal)
    }

Less <- < "<" > {
        p.PushComponent(begin, end, Less)
    }

LessOrEqual <- < "<=" > {
        p.PushComponent(begin, end, LessOrEqual)
    }

Greater <- < ">" > {
        p.PushComponent(begin, end, Greater)
    }

GreaterOrEqual <- < ">=" > {
        p.PushComponent(begin, end, GreaterOrEqual)
    }

NotEqual <- < "!=" / "<>" > {
        p.PushComponent(begin, end, NotEqual)
    }

Plus <- < "+" > {
        p.PushComponent(begin, end, Plus)
    }

Minus <- < "-" > {
        p.PushComponent(begin, end, Minus)
    }

Multiply <- < "*" > {
        p.PushComponent(begin, end, Multiply)
    }

Divide <- < "/" > {
        p.PushComponent(begin, end, Divide)
    }

Modulo <- < "%" > {
        p.PushComponent(begin, end, Modulo)
    }

ident <- [[a-z]] ([[a-z]] / [0-9] / '_')*

sp <- ( ' ' / '\t' / '\n' )*
